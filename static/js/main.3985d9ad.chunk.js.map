{"version":3,"sources":["api/api.js","components/Loader/Loader.jsx","components/PostsList/PostsList.jsx","api/posts.js","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["BASE_URL","request","url","fetch","then","response","json","result","data","Loader","className","PostsList","posts","selectedId","selectPost","length","map","post","key","id","userId","title","type","classNames","button_active","onClick","getPosts","removeComment","method","remove","addComment","body","headers","JSON","stringify","NewCommentForm","onAdd","useState","newCommentName","setNewCommentName","newCommentEmail","setNewCommentEmail","newCommentBody","setNewCommentBody","onSubmit","event","preventDefault","name","placeholder","required","value","onChange","target","PostDetails","setPost","comments","setComments","isCommentVisible","setIsCommentVisible","useEffect","postId","filter","comment","currentStatus","list","email","App","setPosts","users","setUsers","setSelectedId","sortPostsByUser","resievedPosts","getUserPosts","ev","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3985d9ad.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nconst query = '/users';\n\nexport function request(url) {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => response.json())\n    .then(result => result.data);\n}\n\nexport function getUsers() {\n  return request(query);\n}\n\nexport function remove(url, id) {\n  return fetch(`${BASE_URL}${url}/${id}`, {\n    method: 'DELETE',\n  });\n}\n\nexport function post(url, body) {\n  return fetch(`${BASE_URL}${url}`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(body),\n  });\n}\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './PostsList.scss';\nimport { Loader } from '../Loader';\n\nexport const PostsList = ({\n  posts,\n  selectedId,\n  selectPost,\n}) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    {posts.length !== 0 ? (\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className={classNames(\n                'PostsList__button',\n                'button',\n                { button_active: selectedId === post.id },\n              )}\n              onClick={() => {\n                selectPost(post.id);\n              }}\n            >\n              {selectedId === post.id\n                ? 'Close'\n                : 'Open'\n              }\n            </button>\n          </li>\n        ))}\n      </ul>\n    ) : (\n      <Loader />\n    )}\n\n  </div>\n);\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  selectedId: PropTypes.number.isRequired,\n  selectPost: PropTypes.func.isRequired,\n};\n","import { request } from './api';\n\nconst query = '/posts';\n\nexport function getPosts() {\n  return request(query);\n}\n\nexport function getUserPosts(id) {\n  return getPosts()\n    .then(result => result.filter(post => post.userId === id));\n}\n\nexport function getPost(id) {\n  return request(`${query}/${id}`);\n}\n","import { request, remove, post } from './api';\n\nconst query = '/comments';\n\nexport function getComments(postId) {\n  return request(query)\n    .then((result) => {\n      const postComments = result.filter(comment => (\n        comment.postId === postId\n      ));\n\n      return postComments;\n    });\n}\n\nexport function removeComment(id) {\n  return remove(query, id);\n}\n\nexport function addComment(body) {\n  return post(query, body)\n    .then(response => response.json())\n    .then(result => result.data);\n}\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ onAdd }) => {\n  const [newCommentName, setNewCommentName] = useState('');\n  const [newCommentEmail, setNewCommentEmail] = useState('');\n  const [newCommentBody, setNewCommentBody] = useState('');\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => {\n        event.preventDefault();\n        onAdd(newCommentName, newCommentEmail, newCommentBody);\n\n        setNewCommentName('');\n        setNewCommentEmail('');\n        setNewCommentBody('');\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          required\n          value={newCommentName}\n          onChange={(event) => {\n            setNewCommentName(event.target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          required\n          value={newCommentEmail}\n          onChange={(event) => {\n            setNewCommentEmail(event.target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          required\n          value={newCommentBody}\n          onChange={(event) => {\n            setNewCommentBody(event.target.value);\n          }}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  onAdd: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './PostDetails.scss';\n\nimport { getPost } from '../../api/posts';\nimport { getComments, removeComment, addComment } from '../../api/comments';\n\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\n\nexport const PostDetails = ({ selectedId }) => {\n  const [post, setPost] = useState(null);\n  const [comments, setComments] = useState(null);\n  const [isCommentVisible, setIsCommentVisible] = useState(false);\n\n  useEffect(() => {\n    getPost(selectedId)\n      .then(result => setPost(result));\n\n    setComments(null);\n\n    getComments(selectedId)\n      .then(result => setComments(result));\n  }, [selectedId]);\n\n  const deleteComment = (id) => {\n    removeComment(id)\n      .then(() => {\n        setComments(list => list.filter(comment => comment.id !== id));\n      });\n  };\n\n  const addNewComment = (name, email, body) => {\n    const newComment = {\n      name,\n      email,\n      body,\n      postId: selectedId,\n    };\n\n    addComment(newComment)\n      .then((result) => {\n        setComments(list => [...list, result]);\n      });\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      {post ? (\n        <>\n          <section className=\"PostDetails__post\">\n            <p>{post.title}</p>\n          </section>\n\n          {comments ? (\n            <>\n              <section className=\"PostDetails__comments\">\n                {comments.length === 0\n                  ? 'There are not comments yet'\n                  : (\n                    <button\n                      type=\"button\"\n                      className=\"button\"\n                      onClick={() => {\n                        setIsCommentVisible(currentStatus => !currentStatus);\n                      }}\n                    >\n                      {isCommentVisible\n                        ? `Show ${comments.length} comments`\n                        : `Hide ${comments.length} comments`\n                      }\n                    </button>\n                  )}\n\n                {!isCommentVisible && (\n                  <ul className=\"PostDetails__list\">\n                    {comments.map(comment => (\n                      <li className=\"PostDetails__list-item\" key={comment.id}>\n                        <button\n                          type=\"button\"\n                          className=\"PostDetails__remove-button button\"\n                          onClick={() => {\n                            deleteComment(comment.id);\n                          }}\n                        >\n                          X\n                        </button>\n                        <p>{comment.name}</p>\n                      </li>\n                    ))}\n                  </ul>\n                )}\n              </section>\n\n              <section>\n                <div className=\"PostDetails__form-wrapper\">\n                  <NewCommentForm onAdd={addNewComment} />\n                </div>\n              </section>\n            </>\n          ) : (\n            <Loader />\n          )}\n        </>\n      ) : (\n        <Loader />\n      )\n      }\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedId: PropTypes.number.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { getUsers } from './api/api';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getPosts, getUserPosts } from './api/posts';\n\nlet resievedPosts;\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [selectedId, setSelectedId] = useState(0);\n\n  useEffect(() => {\n    getUsers()\n      .then(result => setUsers(result));\n    getPosts()\n      .then(result => setPosts(result));\n  }, []);\n\n  const sortPostsByUser = (id) => {\n    if (id === 0) {\n      return setPosts(resievedPosts);\n    }\n\n    return getUserPosts(id)\n      .then(result => setPosts(result));\n  };\n\n  const selectPost = (id) => {\n    if (id === selectedId) {\n      return setSelectedId(0);\n    }\n\n    return setSelectedId(id);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={(ev) => {\n              sortPostsByUser(+ev.target.value);\n            }}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option\n                value={user.id}\n                key={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            selectedId={selectedId}\n            selectPost={selectPost}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedId ? (\n            <PostDetails selectedId={selectedId} />\n          )\n            : 'There is not the selected post'\n          }\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}