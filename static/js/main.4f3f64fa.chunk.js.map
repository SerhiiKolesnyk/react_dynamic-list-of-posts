{"version":3,"sources":["components/Loader/Loader.jsx","components/PostsList/PostsList.jsx","api/api.js","api/posts.js","api/comments.js","App.jsx","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","index.js"],"names":["Loader","className","PostsList","posts","selectedId","selectPost","length","map","post","key","id","userId","title","type","classNames","button_active","onClick","BASE_URL","request","url","fetch","then","response","json","result","data","getPosts","removeComment","method","remove","addComment","body","headers","JSON","stringify","resievedPosts","NewCommentForm","name","placeholder","PostDetails","useState","setPost","comments","setComments","isCommentVisible","setIsCommentVisible","useEffect","postId","filter","comment","currentStatus","list","onAdd","email","App","setPosts","setSelectedId","sortPostsByUser","getUserPosts","onChange","ev","target","value","users","user","ReactDOM","render","document","getElementById"],"mappings":"25IAGaA,G,YAAS,kBACpB,yBAAKC,UAAU,UACb,yBAAKA,UAAU,uBCCNC,EAAY,SAAC,GAAD,IACvBC,EADuB,EACvBA,MACAC,EAFuB,EAEvBA,WACAC,EAHuB,EAGvBA,WAHuB,OAKvB,yBAAKJ,UAAU,aACb,sCAEkB,IAAjBE,EAAMG,OACL,wBAAIL,UAAU,mBACXE,EAAMI,KAAI,SAAAC,GAAI,OACb,wBAAIP,UAAU,kBAAkBQ,IAAKD,EAAKE,IACxC,6BACE,4CAAcF,EAAKG,OAAnB,QACCH,EAAKI,OAER,4BACEC,KAAK,SACLZ,UAAWa,IACT,oBACA,SACA,CAAEC,cAAeX,IAAeI,EAAKE,KAEvCM,QAAS,WACPX,EAAWG,EAAKE,MAGjBN,IAAeI,EAAKE,GACjB,QACA,aAOZ,kBAAC,EAAD,Q,OC1COO,G,MAAW,kCAEjB,SAASC,EAAQC,GACtB,OAAOC,MAAM,GAAD,OAAIH,GAAJ,OAAeE,IACxBE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAM,OAAIA,EAAOC,QCDpB,SAASC,IACd,OAAOR,EAHK,UCaP,SAASS,EAAcjB,GAC5B,OFRK,SAAgBS,EAAKT,GAC1B,OAAOU,MAAM,GAAD,OAAIH,GAAJ,OAAeE,EAAf,YAAsBT,GAAM,CACtCkB,OAAQ,WEMHC,CAdK,YAcSnB,GAGhB,SAASoB,EAAWC,GACzB,OFNK,SAAcZ,EAAKY,GACxB,OAAOX,MAAM,GAAD,OAAIH,GAAJ,OAAeE,GAAO,CAChCS,OAAQ,OACRI,QAAS,CACP,eAAgB,mCAElBD,KAAME,KAAKC,UAAUH,KEAhBvB,CAlBK,YAkBOuB,GAChBV,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAM,OAAIA,EAAOC,Q,UCdvBU,ECLSC,EAAiB,kBAC5B,0BAAMnC,UAAU,kBACd,yBAAKA,UAAU,cACb,2BACEY,KAAK,OACLwB,KAAK,OACLC,YAAY,YACZrC,UAAU,2BAId,yBAAKA,UAAU,cACb,2BACEY,KAAK,OACLwB,KAAK,QACLC,YAAY,aACZrC,UAAU,2BAId,yBAAKA,UAAU,cACb,8BACEoC,KAAK,OACLC,YAAY,oBACZrC,UAAU,2BAId,4BACEY,KAAK,SACLZ,UAAU,wCAFZ,mBCpBSsC,EAAc,SAAC,GAAoB,IAAlBnC,EAAiB,EAAjBA,WAC5B,EAAwBoC,mBAAS,MAAjC,mBAAOhC,EAAP,KAAaiC,EAAb,KACA,EAAgCD,mBAAS,MAAzC,mBAAOE,EAAP,KAAiBC,EAAjB,KACA,EAAgDH,oBAAS,GAAzD,mBAAOI,EAAP,KAAyBC,EAAzB,KAEAC,qBAAU,WJHL,IAAiBpC,ECTIqC,GDSJrC,EIIZN,EJHHc,EAAQ,GAAD,OAZF,SAYE,YAAaR,KIItBW,MAAK,SAAAG,GAAM,OAAIiB,EAAQjB,MAE1BmB,EAAY,OHhBYI,EGkBZ3C,EHjBPc,EAHK,aAITG,MAAK,SAACG,GAKL,OAJqBA,EAAOwB,QAAO,SAAAC,GAAO,OACxCA,EAAQF,SAAWA,SGepB1B,MAAK,SAAAG,GAAM,OAAImB,EAAYnB,QAC7B,CAACpB,IAuBJ,OACE,yBAAKH,UAAU,eACb,6CAECO,EACC,oCACE,6BAASP,UAAU,qBACjB,2BAAIO,EAAKI,QAGV8B,EACC,oCACE,6BAASzC,UAAU,yBACI,IAApByC,EAASpC,OACN,6BAEA,4BACEO,KAAK,SACLZ,UAAU,SACVe,QAAS,WACP6B,GAAoB,SAAAK,GAAa,OAAKA,OAGvCN,EAAgB,eACLF,EAASpC,OADJ,4BAELoC,EAASpC,OAFJ,eAOrBsC,GACA,wBAAI3C,UAAU,qBACXyC,EAASnC,KAAI,SAAA0C,GAAO,OACnB,wBAAIhD,UAAU,yBAAyBQ,IAAKwC,EAAQvC,IAClD,4BACEG,KAAK,SACLZ,UAAU,oCACVe,QAAS,WA1DX,IAACN,EACrBiB,EADqBjB,EA2DiBuC,EAAQvC,IAzD3CW,MAAK,WACJsB,GAAY,SAAAQ,GAAI,OAAIA,EAAKH,QAAO,SAAAC,GAAO,OAAIA,EAAQvC,KAAOA,aAoD1C,KASA,2BAAIuC,EAAQZ,YAOtB,iCACE,yBAAKpC,UAAU,6BACb,kBAAC,EAAD,CAAgBmD,MAlEV,SAACf,EAAMgB,EAAOtB,GAQlCD,EAPmB,CACjBO,OACAgB,QACAtB,OACAgB,OAAQ3C,IAIPiB,MAAK,SAACG,GACLmB,GAAY,SAAAQ,GAAI,4BAAQA,GAAR,CAAc3B,gBA6D1B,kBAAC,EAAD,OAIJ,kBAAC,EAAD,Q,OFtBO8B,EA5EH,WACV,MAA0Bd,mBAAS,IAAnC,mBAAOrC,EAAP,KAAcoD,EAAd,KACA,EAAoCf,mBAAS,GAA7C,mBAAOpC,EAAP,KAAmBoD,EAAnB,KAEAV,qBAAU,WACRpB,IACGL,MAAK,SAACG,GAEL+B,EADApB,EAAgBX,QAGnB,IAEH,IAAMiC,EAAkB,SAAC/C,GACvB,OAAW,IAAPA,EACK6C,EAASpB,GFhBf,SAAsBzB,GAC3B,OAAOgB,IACJL,MAAK,SAAAG,GAAM,OAAIA,EAAOwB,QAAO,SAAAxC,GAAI,OAAIA,EAAKG,SAAWD,QEiB/CgD,CAAahD,GACjBW,MAAK,SAAAG,GAAM,OAAI+B,EAAS/B,OAW7B,OACE,yBAAKvB,UAAU,OACb,4BAAQA,UAAU,eAChB,qDAGE,4BACEA,UAAU,qBACV0D,SAAU,SAACC,GACTH,GAAiBG,EAAGC,OAAOC,SAG7B,4BAAQA,MAAM,KAAd,aACCC,EAAMxD,KAAI,SAAAyD,GAAI,OACb,4BACEF,MAAOE,EAAKtD,GACZD,IAAKuD,EAAKtD,IAETsD,EAAK3B,YAQhB,0BAAMpC,UAAU,aACd,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACEE,MAAOA,EACPC,WAAYA,EACZC,WAvCS,SAACK,GAClB,OACS8C,EADL9C,IAAON,EACY,EAGFM,OAsCjB,yBAAKT,UAAU,gBACZG,EACC,kBAAC,EAAD,CAAaA,WAAYA,IAEvB,qCGzEd6D,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.4f3f64fa.chunk.js","sourcesContent":["import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './PostsList.scss';\nimport { Loader } from '../Loader';\n\nexport const PostsList = ({\n  posts,\n  selectedId,\n  selectPost,\n}) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    {posts.length !== 0 ? (\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className={classNames(\n                'PostsList__button',\n                'button',\n                { button_active: selectedId === post.id },\n              )}\n              onClick={() => {\n                selectPost(post.id);\n              }}\n            >\n              {selectedId === post.id\n                ? 'Close'\n                : 'Open'\n              }\n            </button>\n          </li>\n        ))}\n      </ul>\n    ) : (\n      <Loader />\n    )}\n\n  </div>\n);\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  selectedId: PropTypes.number.isRequired,\n  selectPost: PropTypes.func.isRequired,\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport function request(url) {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => response.json())\n    .then(result => result.data);\n}\n\nexport function remove(url, id) {\n  return fetch(`${BASE_URL}${url}/${id}`, {\n    method: 'DELETE',\n  });\n}\n\nexport function post(url, body) {\n  return fetch(`${BASE_URL}${url}`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(body),\n  });\n}\n","import { request } from './api';\n\nconst query = '/posts';\n\nexport function getPosts() {\n  return request(query);\n}\n\nexport function getUserPosts(id) {\n  return getPosts()\n    .then(result => result.filter(post => post.userId === id));\n}\n\nexport function getPost(id) {\n  return request(`${query}/${id}`);\n}\n","import { request, remove, post } from './api';\n\nconst query = '/comments';\n\nexport function getComments(postId) {\n  return request(query)\n    .then((result) => {\n      const postComments = result.filter(comment => (\n        comment.postId === postId\n      ));\n\n      return postComments;\n    });\n}\n\nexport function removeComment(id) {\n  return remove(query, id);\n}\n\nexport function addComment(body) {\n  return post(query, body)\n    .then(response => response.json())\n    .then(result => result.data);\n}\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getPosts, getUserPosts } from './api/posts';\nimport users from './api/users.json';\n\nlet resievedPosts;\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [selectedId, setSelectedId] = useState(0);\n\n  useEffect(() => {\n    getPosts()\n      .then((result) => {\n        resievedPosts = result;\n        setPosts(resievedPosts);\n      });\n  }, []);\n\n  const sortPostsByUser = (id) => {\n    if (id === 0) {\n      return setPosts(resievedPosts);\n    }\n\n    return getUserPosts(id)\n      .then(result => setPosts(result));\n  };\n\n  const selectPost = (id) => {\n    if (id === selectedId) {\n      return setSelectedId(0);\n    }\n\n    return setSelectedId(id);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={(ev) => {\n              sortPostsByUser(+ev.target.value);\n            }}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option\n                value={user.id}\n                key={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            selectedId={selectedId}\n            selectPost={selectPost}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedId ? (\n            <PostDetails selectedId={selectedId} />\n          )\n            : 'There is not the selected post'\n          }\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = () => (\n  <form className=\"NewCommentForm\">\n    <div className=\"form-field\">\n      <input\n        type=\"text\"\n        name=\"name\"\n        placeholder=\"Your name\"\n        className=\"NewCommentForm__input\"\n      />\n    </div>\n\n    <div className=\"form-field\">\n      <input\n        type=\"text\"\n        name=\"email\"\n        placeholder=\"Your email\"\n        className=\"NewCommentForm__input\"\n      />\n    </div>\n\n    <div className=\"form-field\">\n      <textarea\n        name=\"body\"\n        placeholder=\"Type comment here\"\n        className=\"NewCommentForm__input\"\n      />\n    </div>\n\n    <button\n      type=\"submit\"\n      className=\"NewCommentForm__submit-button button\"\n    >\n      Add a comment\n    </button>\n  </form>\n);\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './PostDetails.scss';\n\nimport { getPost } from '../../api/posts';\nimport { getComments, removeComment, addComment } from '../../api/comments';\n\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\n\nexport const PostDetails = ({ selectedId }) => {\n  const [post, setPost] = useState(null);\n  const [comments, setComments] = useState(null);\n  const [isCommentVisible, setIsCommentVisible] = useState(false);\n\n  useEffect(() => {\n    getPost(selectedId)\n      .then(result => setPost(result));\n\n    setComments(null);\n\n    getComments(selectedId)\n      .then(result => setComments(result));\n  }, [selectedId]);\n\n  const deleteComment = (id) => {\n    removeComment(id)\n      .then(() => {\n        setComments(list => list.filter(comment => comment.id !== id));\n      });\n  };\n\n  const addNewComment = (name, email, body) => {\n    const newComment = {\n      name,\n      email,\n      body,\n      postId: selectedId,\n    };\n\n    addComment(newComment)\n      .then((result) => {\n        setComments(list => [...list, result]);\n      });\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      {post ? (\n        <>\n          <section className=\"PostDetails__post\">\n            <p>{post.title}</p>\n          </section>\n\n          {comments ? (\n            <>\n              <section className=\"PostDetails__comments\">\n                {comments.length === 0\n                  ? 'There are not comments yet'\n                  : (\n                    <button\n                      type=\"button\"\n                      className=\"button\"\n                      onClick={() => {\n                        setIsCommentVisible(currentStatus => !currentStatus);\n                      }}\n                    >\n                      {isCommentVisible\n                        ? `Show ${comments.length} comments`\n                        : `Hide ${comments.length} comments`\n                      }\n                    </button>\n                  )}\n\n                {!isCommentVisible && (\n                  <ul className=\"PostDetails__list\">\n                    {comments.map(comment => (\n                      <li className=\"PostDetails__list-item\" key={comment.id}>\n                        <button\n                          type=\"button\"\n                          className=\"PostDetails__remove-button button\"\n                          onClick={() => {\n                            deleteComment(comment.id);\n                          }}\n                        >\n                          X\n                        </button>\n                        <p>{comment.name}</p>\n                      </li>\n                    ))}\n                  </ul>\n                )}\n              </section>\n\n              <section>\n                <div className=\"PostDetails__form-wrapper\">\n                  <NewCommentForm onAdd={addNewComment} />\n                </div>\n              </section>\n            </>\n          ) : (\n            <Loader />\n          )}\n        </>\n      ) : (\n        <Loader />\n      )\n      }\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedId: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}